@startuml
class Circuit {
    +str name
    +dict bundles
    +dict buses
    +dict conductors
    +dict geometries
    +dict transformers
    +dict transmission_lines

    +add_bundle(name: str, num_conductors: int, spacing: float, conductor: Conductor):)
    +add_bus(name, base_kv)
    +add_conductor(name, diam, GMR, resistance, ampacity)
}

class Bundle {
    +str name
    +int num_conductors
    +float spacing
    +Conductor conductor

    +calc_radii()
}

class Bus {
    +str name
    +float base_kv
    +bus.Bus index
    +s_sys
    -int bus_count
}

class Conductor {
    +str name
    +float diam
    +float GMR
    +float resistance
    +float ampacity
    -float radius
}

class Generator {
    +str name
    +Bus bus
    +float voltage_setpoint
    +float mw_setpoint
}

class Geometry {
    +str name
    +float xa
    +float ya
    +float xb
    +float yb
    +float xc
    +float yc

    +calc_Deq()
}

class Load {
    +str name
    +Bus bus
    +float real_power
    +float reactive_power
}

class Settings {
    -int frequency
    -int base_power
}

class Transformer {
    +str name
    +Bus bus1
    +Bus bus2
    +float power_rating
    +float impedance_percent
    +float x_over_r_ratio
    -float xpu
    -float rpu
    -float xpu_xfmr
    -float rpu_xfmr
    -float zpu
    -float ypu
    -float yprim

    +calc_impedance()
    +calc_admittance()
    +calc_matrix()
}

class TransmissionLine {
    +str name
    +Bus bus1
    +Bus bus2
    +Bundle bundle
    +Conductor conductor 
    +Geometry geometry 
    +float length
    -float rseries
    -float rpu
    -float xseries
    -float xpu
    -int f
    -float zpu
    -float ypu
    -float bpu
    -float yprim

    +calc_series()
    +calc_admittance()
    +calc_matrix()
}

class Solution {

}

class Solution_Symmetric {

}

class Jacobian {
    
}

Circuit --> Bundle
Circuit --> Bus
Circuit --> Conductor
Circuit --> Generator
Circuit --> Geometry
Circuit --> Load
Circuit --> Settings
Circuit --> Transformer
Circuit --> TransmissionLine

@enduml
